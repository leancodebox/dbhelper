package {{.ModelName}}

func create(entity *{{.ModelName}}) int64 {
	result := builder().Create(entity)
	return result.RowsAffected
}

func save(entity *{{.ModelName}}) int64 {
	result := builder().Save(entity)
	return result.RowsAffected
}

func saveAll(entities []*{{.ModelName}}) int64 {
	result := builder().Save(entities)
	return result.RowsAffected
}

func deleteEntity(entity *{{.ModelName}}) int64 {
	result := builder().Delete(entity)
	return result.RowsAffected
}

func get(id any) (entity *{{.ModelName}}) {
	builder().Where(pid, id).First(entity)
	return
}

func getBy(field, value string) (entity *{{.ModelName}}) {
	builder().Where(field + " = ?", value).First(&entity)
	return
}

func all() (entities []*{{.ModelName}}) {
	builder().Find(&entities)
	return
}

func isExist(field, value string) bool {
	var count int64
	builder().Where(field + " = ?", value).Count(&count)
	return count > 0
}